---
import Article from '../components/article.astro'
import Layout from './base-layout.astro'
import RelatedArticles from '../components/related-articles.astro'
import TruncatedContent from '../components/truncated-content.astro'
import stripMd from '../utils/strip-md'
import truncateMd from '../utils/truncate-md'
import type { CollectionEntry } from 'astro:content'
import { byDate } from '../utils/sort'
import { getCollection } from 'astro:content'
import { getRelatedPosts } from '../utils/get-posts'
import { noDrafts } from '../utils/filter'
import { title as blogTitle } from '../consts/config'

export interface Props {
  post: CollectionEntry<'posts'>
  permalink?: string
}

const { post } = Astro.props
const {
  data: { title, cover, coverAlt, date, link, tags },
  slug,
} = post
const { permalink = `/p/${slug}` } = Astro.props

const isPostPage = `${Astro.url}`.indexOf('/p/') > -1
const Component = isPostPage ? Layout : Fragment
const description = stripMd(post.body.trim().split('\n')[0])

const truncatedMd = truncateMd(post.body)
const wasTruncated = truncatedMd !== post.body

let relatedPosts: CollectionEntry<'posts'>[] = []
if (isPostPage) {
  relatedPosts = await getCollection('posts', noDrafts)
  relatedPosts = relatedPosts.sort(byDate)
  relatedPosts = getRelatedPosts(relatedPosts, post)
}

const { Content } = await post.render()
---

<Component
  cover={cover}
  description={description}
  permalink={permalink}
  title={`${blogTitle} - ${title}`}
>
  <Article
    cover={cover}
    coverAlt={coverAlt}
    date={date}
    link={link}
    slug={slug}
    tags={tags}
    title={title}
    url={permalink}
  >
    {
      isPostPage || !wasTruncated ? (
        <Content />
      ) : (
        <TruncatedContent title={title} url={permalink} content={truncatedMd} />
      )
    }
  </Article>
  {isPostPage && <RelatedArticles posts={relatedPosts} />}
</Component>
