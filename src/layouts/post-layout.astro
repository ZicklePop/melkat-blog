---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import Article from "@/src/components/article.astro";
import RelatedArticles from "@/src/components/related-articles.astro";
import TruncatedContent from "@/src/components/truncated-content.astro";
import { title as blogTitle } from "@/src/consts/config";
import { noDrafts } from "@/src/lib/filter";
import { getRelatedPosts } from "@/src/lib/get-posts";
import { byDate } from "@/src/lib/sort";
import stripMd from "@/src/lib/strip-md";
import truncateMd from "@/src/lib/truncate-md";
import Layout from "./base-layout.astro";

export interface Props {
	post: CollectionEntry<"posts">;
	permalink?: string;
}

const { post } = Astro.props;
const {
	data: { title, cover, coverAlt, date, link, tags },
	slug,
} = post;
const { permalink = `/p/${slug}` } = Astro.props;

const isPostPage = `${Astro.url}`.indexOf("/p/") > -1;
const Component = isPostPage ? Layout : Fragment;
const description = stripMd(post.body.trim().split("\n")[0]);

const truncatedMd = truncateMd(post.body);
const wasTruncated = truncatedMd !== post.body;

let relatedPosts: CollectionEntry<"posts">[] = [];
if (isPostPage) {
	relatedPosts = await getCollection("posts", noDrafts);
	relatedPosts = relatedPosts.sort(byDate);
	relatedPosts = getRelatedPosts(relatedPosts, post);
}

const { Content } = await post.render();
const showTruncated = !isPostPage && wasTruncated;
---

<Component
  cover={cover?.src}
  description={description}
  permalink={permalink}
  title={`${blogTitle} - ${title}`}
>
  <Article
    cover={cover}
    coverAlt={coverAlt}
    date={date}
    link={link}
    slug={slug}
    tags={tags}
    title={title}
    url={permalink}
  >
    {
      showTruncated ? (
        <TruncatedContent title={title} url={permalink} content={truncatedMd} />
      ) : (
        <div class="e-content">
          <Content />
        </div>
      )
    }
  </Article>
  {isPostPage && <RelatedArticles posts={relatedPosts} />}
</Component>
