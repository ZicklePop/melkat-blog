---
import { cxs } from "@/src/consts/config";
import Button from "./button.astro";
import Kbd from "./kbd.astro";
---

<div id="key-commands" popover>
  <h2 class={cxs.h2}>Keyboard shortcuts</h2>
	<div class="grid gap-3 md:grid-cols-2 justify-between">
		<ul>
			<li><Kbd>j</Kbd> Next article</li>
			<li><Kbd>k</Kbd> Previous article</li>
			<li><Kbd>Enter</Kbd> View article</li>
		</ul>
		<ul>
			<li><Kbd>l</Kbd> Next page</li>
			<li><Kbd>h</Kbd> Previous page</li>
		</ul>
		<ul>
			<li><Kbd>/</Kbd> Focus search</li>
			<li><Kbd>?</Kbd> Toggle this modal</li>
		</ul>
	</div>
  <div class="text-right">
    <Button
      popovertarget="key-commands"
      popovertargetaction="hide"
      type="button"
    >
      Dismiss
    </Button>
  </div>
</div>
<key-down data-key="?">
  <button
    class="sr-only"
    type="button"
    popovertarget="key-commands"
    popovertargetaction="toggle"
  >
    Toggle keyboard shortcuts
  </button>
</key-down>
<script>
	enum DIR {
		NEXT,
		PREV
	}
	function getClosestArticle() {
		let closestArticle
		const articles = document.getElementsByTagName('article')
		for (let i = 0; i < articles.length; i++) {
			const article = articles[i]
			const pos = article.getBoundingClientRect()
			const y = Math.abs(pos.y)
			article.removeAttribute('data-selected')
			if (!closestArticle || y < closestArticle.y) {
				closestArticle = {
					article,
					y,
				}
			}
		}
		if (closestArticle?.article) {
			closestArticle?.article.setAttribute('data-selected', 'true')
		}
		return closestArticle?.article
	}
	function getSibling(el: HTMLElement, dir = DIR.NEXT) {
		if (dir === DIR.NEXT && el?.nextElementSibling?.tagName.toLowerCase() === 'article') {
			return el.nextElementSibling
		} else if (dir === DIR.PREV && el?.previousElementSibling?.tagName.toLowerCase() === 'article') {
			return el.previousElementSibling
		}
		return el
	}
	function getSelected(dir = DIR.NEXT) {
		const selected = document.querySelector('article[data-selected]') as HTMLElement
		let nextSelected 
		if (selected) {
			nextSelected = getSibling(selected, dir) as HTMLElement
			selected.removeAttribute('data-selected')
		} else {
			nextSelected = getClosestArticle() as HTMLElement
		}
		nextSelected?.setAttribute('data-selected', 'true')
		nextSelected?.scrollIntoView({ behavior: 'smooth' })
		nextSelected?.focus()
	}
	document.addEventListener('keydown', (e) => {
		const target = e.target as HTMLElement
		const targetType = target?.tagName?.toLowerCase();
		const contentEditableAttr = target?.getAttribute("contenteditable");
		if (
			targetType === "input" ||
			targetType === "textarea" ||
			contentEditableAttr === "" ||
			contentEditableAttr === "true" ||
			contentEditableAttr === "plaintext-only"
		) {
			return;
		}
		if (e.key === 'j') {
		  getSelected(DIR.NEXT)
		}
		if (e.key === "k") {
		  getSelected(DIR.PREV)
		}
		if (e.key === "Enter" && targetType === "article" && target.hasAttribute('data-selected')) {
			const permalink = target?.querySelector('a[title^="Permalink"]') as HTMLElement
			permalink?.click();
		}
	})
</script>
