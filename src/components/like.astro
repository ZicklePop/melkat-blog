---
import { cxs } from '../consts/config'
import Icon from './icon.astro'

export interface Props {
  slug: string
}

const { slug } = Astro.props
---

<kudos-btn data-path={`/p/${slug}`}>
  <div class="block">
    <button
      class={`${cxs.aIcon} no-underline group disabled:cursor-not-allowed`}
      title={`Like this post`}
      type="button"
    >
      <Icon
        type="like"
        appendClass="motion-safe:transition-transform group-hover:scale-125 group-disabled:scale-100 group-disabled:*:stroke-hot-pink-600"
      />
      <span class="kudos-count"></span>
      <span class="underline"
        >Like<span class="hidden group-disabled:inline">d</span></span
      >
    </button>
  </div>
</kudos-btn>
<script>
  class KudosBtn extends HTMLElement {
    static tagName = 'kudos-btn'
    static tinylyticsEmbedUrl = 'https://tinylytics.app/embed/'
    static tinylyticsKudosUrl = 'https://tinylytics.app/kudos/'

    existing_kudos = false
    kudos_count = 0
    kudos_path = window.location.pathname
    no_store = false
    private_kudos = false
    show_zero = false

    static register(
      tagName = this.tagName,
      registry = globalThis.customElements
    ) {
      registry?.define(tagName, this)
    }

    get siteIdFromScript() {
      const scriptEl = document.querySelector(
        `script[src^="${KudosBtn.tinylyticsEmbedUrl}"]`
      ) as HTMLScriptElement
      return (
        scriptEl &&
        scriptEl.src &&
        scriptEl.src.replace(KudosBtn.tinylyticsEmbedUrl, '').replace('.js', '')
      )
    }

    get kudosApiUrl() {
      const id = this.dataset.id || this.siteIdFromScript
      return `${KudosBtn.tinylyticsKudosUrl}${id}`
    }

    connectedCallback() {
      if (this.dataset.path) {
        this.kudos_path = this.dataset.path || window.location.pathname
      }
      if (this.dataset.ignore) {
        this.no_store = !!this.dataset.ignore
      }
      if (this.dataset.private) {
        this.private_kudos = !!this.dataset.private
      }
      if (this.dataset.zeroes) {
        this.show_zero = !!this.dataset.zeroes
      }
      this.getKudosCount()
      this.existing_kudos = !!localStorage.getItem(
        `tiny_kudos_${this.kudos_path}`
      )

      const button = this.querySelector('button')
      const svg = button?.querySelector('svg')
      if (this.existing_kudos && button) {
        button.disabled = true
      } else if (button) {
        button?.addEventListener('click', () => {
          button.disabled = true
          if (svg) {
            svg.classList.add('motion-safe:animate-single-ping')
          }
          this.kudos_count++
          this.setKudosCount()
          this.updateKudosCount()
        })
      }
    }

    getKudosCount() {
      if (this.private_kudos) {
        return
      }
      fetch(`${this.kudosApiUrl}.json?path=${this.kudos_path}`)
        .then(response => response.json())
        .then(data => {
          if (data.count != null) {
            this.kudos_count = data.count
            this.updateKudosCount()
          }
        })
    }

    setKudosCount() {
      fetch(`${this.kudosApiUrl}.json?path=${this.kudos_path}`, {
        method: 'post',
      })
        .then(response => response.json())
        .then(data => {
          if (data.id != null && !this.no_store) {
            localStorage.setItem(`tiny_kudos_${this.kudos_path}`, data.id)
          }
        })
    }

    updateKudosCount() {
      const counter = this.querySelector('.kudos-count')
      const isZero = this.kudos_count === 0
      const shouldShowCounter = counter && !this.private_kudos && !isZero
      const shouldShowZeroCounter = counter && isZero && this.show_zero
      if (shouldShowCounter || shouldShowZeroCounter) {
        counter.textContent = `${this.kudos_count}`
      }
    }
  }
  KudosBtn.register()
</script>
